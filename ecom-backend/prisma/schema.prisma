datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
  GUEST
}

enum OrderStatus {
  PENDING
  DELIVERD
  SHIPPED
  CANCELED
}

enum NotificationType {
  ORDER_PLACED
  STATUS_UPDATED
  ORDER_CANCELED
  ORDER_SHIPPED
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String?        @unique
  password     String?
  role         Role           @default(CUSTOMER)
  addresses    Address[]
  phone        String?
  cartItems    CartItem[]
  orders       Order[]
  createdAt    DateTime       @default(now())
  Notification Notification[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  price       Float
  description String?
  categoryId  Int
  category    Category       @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  images      ProductImage[]
  createdAt   DateTime       @default(now())
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model CartItem {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int     @default(1)

  @@unique([userId, productId])
}

model Order {
  id           Int            @id @default(autoincrement())
  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int?
  items        OrderItem[]
  guestToken   String?
  totalPrice   Float
  status       OrderStatus    @default(PENDING)
  address      String
  createdAt    DateTime       @default(now())
  Notification Notification[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int     @default(1)
}

model Address {
  id      Int    @id @default(autoincrement())
  userId  Int
  address String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  orderId   Int
  message   String
  type      NotificationType // e.g. ORDER_PLACED, STATUS_UPDATED
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user  User  @relation(fields: [userId], references: [id])
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
